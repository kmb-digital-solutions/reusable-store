name: CI

# Controls when the workflow will run
on:
  
  workflow_call:
    inputs:
      
      config_files_directory:
        required: true
        type: string

      build_project_type:
        required: true
        type: string
      
      hosting_bucket:
        required: true
        type: string
        
      in_stack_id:
        required: true
        type: string
        
      
      in_cloudfront_url_output_to_query:
        required: true
        type: string
        
      
      in_cloudfront_output:
        required: true
        type: string
        

    secrets:
      envPAT:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "sba-project-properties.git"
  ORGANIZATION: "kmb-digital-solutions"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  CDK_MODULE: "cdk_checkedout"
  DEVOPS_STORE: "devops_store"

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  AWS-CDK-Deployment:
    if: github.repository != 'kmb-digital-solutions/reusable-store'
    runs-on: ubuntu-latest
      
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        - name: Checkout
          uses: actions/checkout@v2

         # Node installation (if required)
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2

        - name: Build directory swagger
          if: ${{inputs.build_project_type == 'swagger' }}
          run: |
            echo "BUILD_DIRECTORY=dist" >> $GITHUB_ENV

        - name: Build directory react
          if: ${{inputs.build_project_type == 'react' }}
          run: |
            echo "BUILD_DIRECTORY=build" >> $GITHUB_ENV
        
        - name: Build directory echo
          run: echo $BUILD_DIRECTORY
        # Clone repositories prior to work
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Make cdk directory
          run: mkdir ${{env.CDK_MODULE}}
        
        - name: Make devops store directory
          run: mkdir ${{env.DEVOPS_STORE}}
        
        - name: Swagger install
          if: ${{inputs.build_project_type == 'swagger' }}
          run: |
            npm install swagger-ui
            npm install -g swagger-cli
            

        - name: Swagger install dependencies
          if: ${{inputs.build_project_type == 'swagger1' }}
          run: |
            npm install css-loader json-loader style-loader yaml-loader webpack webpack-cli html-webpack-plugin -D
            
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: simple-business-apps/strc-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: CDK Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: kmb-digital-solutions/aws-cdk-modules
            ref: main
            path: ${{env.CDK_MODULE}}

        - name: Node Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: kmb-digital-solutions/kmb-ds-devops-store
            ref: main
            path: ${{env.DEVOPS_STORE}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./
        
        - name: Move node modules directory
          run: cp -a ${{env.DEVOPS_STORE}}/swagger_modules/. .

        - name: Build swagger
          if: ${{inputs.build_project_type == 'swagger'}}
          run: |
            mv swagger.yaml swagger_old.yaml
            swagger-cli bundle swagger_old.yaml --outfile open-api.json --type json
            swagger-cli bundle swagger_old.yaml --outfile swagger.yaml --type yaml
            npm run build
        
        - name: OpenAPIGenerator Installation
          if: ${{inputs.build_project_type == 'swagger'}}
          run: |
            npm install @openapitools/openapi-generator-cli
            
        - name: OpenAPIGenerator Check
          if: ${{inputs.build_project_type == 'swagger'}}
          run: |
            npx openapi-generator-cli generate -i swagger.yaml -g typescript-axios -o libs/api-client/src/generated

        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws-strc-development ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            echo "AWS_ENVRIONMENT=${account_id}" >> $GITHUB_ENV
        
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/strc-github-oidc-access-role"
            echo "AWS_ASSUME_ROLE=arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/strc-github-oidc-access-role" >> $GITHUB_ENV
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{env.AWS_ASSUME_ROLE}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
        - name: Copy cdk config files
          run: |
            rm -r ${{env.CDK_MODULE}}/config_files/*
            cp -a ${{inputs.config_files_directory}}/. ${{env.CDK_MODULE}}/config_files/
            cp -a ${{env.PROJECT_FILES_DIRECTORY}}/. ${{env.CDK_MODULE}}/

        - name: Create NX environment varibles file
          if: ${{inputs.build_project_type == 'react'}}
          run: |
            pip3 install boto3
            pip3 install jproperties
            mv .env .env_old
            python3 ${{env.PROJECT_FILES_DIRECTORY}}/create_env_file.py
            
        - name: Build react Frontend
          if: ${{inputs.build_project_type == 'react'}}
          run: |
            npm ci
            if [[ ${BRANCH_NAME} == 'main' ]]
            then
              npm run build
            else
              npm run build
            fi
        
        - name: Install yaml
          run: |
            pip install pyyaml
            sudo npm install -g aws-cdk
        
        - name: Stack id to query
          run: |
            echo "IN_STACK_ID=${{inputs.in_stack_id}}" >> $GITHUB_ENV

        - name: Hosting bucket
          run: |
            echo "HOSTING_BUCKET=${{inputs.hosting_bucket}}" >> $GITHUB_ENV
        
        - name: Cloudfront id output
          run: |
            echo "CF_ID_OUTPUT=${{inputs.in_cloudfront_output}}cfoutput" >> $GITHUB_ENV
        
        - name: Cloudfront URL output
          run: |
            echo "CF_URL_OUTPUT=${{inputs.in_cloudfront_url_output_to_query}}cfurloutput" >> $GITHUB_ENV
            
        # Upload a file to AWS s3
        - name:  Deploy to S3 - Copy Build folder to s3
          run: |
            aws s3 sync ./$BUILD_DIRECTORY s3://${HOSTING_BUCKET}
            
        # Build & deploy docker image
        - name: Copy Swagger json to s3
          if: ${{inputs.build_project_type == 'swagger'}}
          run: |
            mv swagger.yaml open-api.yaml
            aws s3 cp open-api.json s3://${HOSTING_BUCKET}
            aws s3 cp open-api.yaml s3://${HOSTING_BUCKET}
        - name: Invalidate cloudfront cache
          run: |
            echo ${CF_ID_OUTPUT} is the output id
            CLOUDFRONT_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${IN_STACK_ID} --query "Stacks[0].Outputs[?OutputKey=='${CF_ID_OUTPUT}'].OutputValue" --output text)
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/*'
        
        - name: Domain url
          id: domain_url
          run: |
            DOMAIN_URL=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${IN_STACK_ID} --query "Stacks[0].Outputs[?OutputKey=='${CF_URL_OUTPUT}'].OutputValue" --output text)
            echo "::set-output name=DOMAIN_URL_OUTPUT::$DOMAIN_URL" 
            
        - name: Echo Domain URL
          run: |
            echo "::warning::https://${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}} is the cloudfront url"

    outputs:
      domain_url: ${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}}